<?php

/*

ToDo:  

Drupal tabs and doc conventions
Uninstall  - remove hooks from DB
Add message for browser detection and unsupported scenarios
Update .info with resources and references to previous projects
Figure out how to selectively load JS and module capabilities on a per-node and content-type basis
Figure out if tabs make sense
Build controller GUI
Cache needs to be cleared for JS

*/

drupal_static_reset('sites/all/modules/custom/webspeech_tts/webspeech_tts.js?v=1');
function webspeech_tts_menu() {
  $items = array();
  $items['node/%/webspeech_tts'] = array(
    'title' => t('Webspeech TTS for Chrome'),
    'description' => t('Option to Read Node Content Out Loud'),
    //'type' => MENU_LOCAL_TASK,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webspeech_tts_form'),
    'access callback' => 'webspeech_tts_access_tab',
    'access arguments' => array('Create Webspeech subscriptions', 1),'type' => MENU_LOCAL_TASK,
  );

  $items['admin/config/content/webspeech_tts'] = array(
    'title' => t('Webspeech TTS for Chrome'),
    'description' => t('Administer Webspeech TTS for Chrome'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('webspeech_tts_admin_settings_form'),
    'access arguments' => array('administer webspeech_tts'),
    'file' => 'webspeech_tts.admin.inc',
    'type' => MENU_NORMAL_ITEM,
    );
  return $items;
}


function webspeech_tts_form($form, &$form_state){


  $tts_lang_accent = variable_get('webspeech_tts_lang_accent', 'accent');
  $tts_voice = variable_get('webspeech_tts_voice', 'tts_voice');
  $tts_vol = variable_get('webspeech_tts_volume', 'volume');
  $tts_rate = variable_get('webspeech_tts_rate', 'rate');
  $tts_pitch = variable_get('webspeech_tts_pitch', 'pitch');


  //drupal_set_message($message);
  
  drupal_add_js(array('webspeech_tts' => array('tts_lang_accent_js' => $tts_lang_accent)), 'setting');
  drupal_add_js(array('webspeech_tts' => array('tts_voice_js' => $tts_voice)), 'setting');
  drupal_add_js(array('webspeech_tts' => array('tts_volume_js' => $tts_vol)), 'setting');
  drupal_add_js(array('webspeech_tts' => array('tts_rate_js' => $tts_rate)), 'setting');
  drupal_add_js(array('webspeech_tts' => array('tts_pitch_js' => $tts_pitch)), 'setting');

  $path_args = explode('/', current_path());  
  $node = node_load((int)$path_args[1]);
  $node_content_to_js = $node->body['und'][0]['value'];

  drupal_static_reset('sites/all/modules/custom/webspeech_tts/webspeech_tts.js?v=1');
  drupal_add_js(array('webspeech_tts' => array('proof_of_concept' => $node_content_to_js)), 'setting');
  drupal_add_js('sites/all/modules/custom/webspeech_tts/webspeech_tts.js?v=1');

  print '<pre>';
 //var_dump(get_defined_vars());
  print '</pre>';


  $form['read_text'] = array(
      '#type' => 'submit',
      '#value' => t('Read Text Aloud'),
      '#action' => url('#'),
      '#id' => 'read_text',
      '#attributes' => array('onclick' => 'return (false);'),
  );

/* need to find the right method here...backend form processing/js kludge remains awkward*/

  $form['pause_button'] = array(
    '#type' => 'button',
    '#value' => t('Pause'),
    '#action' => url('#'),
    //'#submit' => array('stop_submit_function'),
    '#id' => 'pause_button',
    '#attributes' => array('onclick' => 'return (false);'),
  );

  $form['cancel_button'] = array(
    '#type' => 'button',
    '#value' => t('Cancel'),
    '#action' => url('#'),
    //'#submit' => array('stop_submit_function'),
    '#id' => 'cancel_button',
    '#attributes' => array('onclick' => 'return (false);'),
  );


  return $form;
}



function webspeech_tts_form_node_form_alter(&$form, $form_state) {
  $node = $form['#node'];
  $types = variable_get('webspeech_tts_types', array());
  if (!empty($types[$node->type]) && user_access('administer webspeech_tts settings')) {
    $form['webspeech_tts'] = array(
      '#title' => t('webspeech_tts'),
      '#type' => 'fieldset',
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      '#group' => 'additional_settings',
    );
    $form['webspeech_tts']['webspeech_tts_enabled'] = array(
      '#title' => t('Enable WebspeechTTS'),
      '#type' => 'checkbox',
      '#default_value' => isset($node->webspeech_tts_enabled) ? 
$node->webspeech_tts_enabled : FALSE,
    );
  }
}
function webspeech_tts_get_node_enabled($nid){
  if (is_numeric($nid)) {
    $result = db_query("SELECT nid FROM {webspeech_tts_enabled}
      WHERE nid = :nid", array('nid' => $nid))->fetchField();
    if ($result) {
      return TRUE;
    }   
  }
  return FALSE;
}
function webspeech_tts_set_node_enabled($nid){
  if (is_numeric($nid) &! webspeech_tts_get_node_enabled($nid)) {
      db_insert('webspeech_tts_enabled')
        ->fields(array('nid' => $nid))
        ->execute();
  }
}
function webspeech_tts_delete_node_enabled($nid) {
  if (is_numeric($nid)) {
    db_delete('webspeech_tts_enabled')
      ->condition('nid', $nid)
      ->execute();
  }
}
function webspeech_tts_node_load($nodes, $types) {
  foreach ($nodes as $nid => $node) {
    $node->webspeech_tts_enabled = webspeech_tts_get_node_enabled($node->nid);
  }
}
function webspeech_tts_node_insert($node) {
  if ($node->webspeech_tts_enabled) {
    webspeech_tts_set_node_enabled($node->nid);
  }
}
function webspeech_tts_node_update($node) {
  webspeech_tts_delete_node_enabled($node->nid);
  if ($node->webspeech_tts_enabled) {
    webspeech_tts_set_node_enabled($node->nid);
  }
}
function webspeech_tts_node_delete($node) {
  webspeech_tts_delete_node_enabled($node->nid);
}
function webspeech_tts_access_tab($permission, $nid) {
    return webspeech_tts_get_node_enabled($nid) && user_access($permission);
}
